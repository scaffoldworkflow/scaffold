version: v1
name: foobar
inputs:
  - name: name
    description: Name to write with greeting
    type: password 
    default: "John Doe"
  - name: greeting
    description: Greeting to write out
    type: text 
    default: "Hello, "
links:
  website: https://johnfcarter.tech
  google: https://google.com
groups:
  - foo
tasks:
- name: write_file
  image: ubuntu:20.04
  run: |
    echo "${file_contents}" > /tmp/run/foo.txt
  store:
    file:
      - foo.txt
  env:
    file_contents: Oh hey, new file contents

- name: store_full_message
  image: ubuntu:20.04 
  run: |
    MESSAGE="${greeting}${name}"
  store:
    env:
      - MESSAGE
  inputs:
    greeting: greeting
    name: name 

- name: print_file
  depends_on:
    success:
      - write_file
      - store_full_message
  image: ubuntu:20.04
  load:
    file:
      - foo.txt
  run: |
    echo "----  WRITING FILE   ----"
    cat /tmp/run/foo.txt
    echo "----  SLEEPING FOR A BIT  ----"
    sleep 30
  check:
    interval: 30
    image: ubuntu:20.04
    run: |
      echo "Writing data to display"
      echo '[{"kind":"value","name":"Exit Reason","data":"Testing errored check"}]' > /tmp/run/.display
      echo "Bailing with invalid status"
      exit 1
  auto_execute: true

- name: print_error
  image: ubuntu:20.04
  depends_on:
    error:
      - print_file
  run: |
    echo "The print_file task has errored"
  auto_execute: true

- name: print_always
  image: ubuntu:20.04
  depends_on:
    always:
      - print_file
  run: |
    echo "This should always run regardless of print_file status"
  auto_execute: true

- name: print_env
  depends_on:
    success:
      - print_file
  image: ubuntu:20.04
  load:
    env:
      - MESSAGE
  run: |
    echo "---- WRITING MESSAGE ----"
    echo "${MESSAGE}"
  check:
    interval: 10
    image: ubuntu:20.04
    run: |
      apt-get update && apt-get install -y jq
      display_contents=$(cat << EOM
        [
          {
            "kind": "table",
            "name": "Example Table",
            "header": ["foo", "bar", "baz"]
            "data": [
              [0, 1, 2],
              [3, 4, 5],
              [6, 7, 8]
            ]
          },
          {
            "kind": "value",
            "name": "Counter value",
            "data": 0
          }
        ]
      EOM
      )
      echo "${display_contents}" > /tmp/run/.display

      echo "Running check"

      for i in {1..30}
      do
        display_contents="$(cat /tmp/run/.display | jq ".[1].data = \"${i}\"")" && echo "${display_contents}" > /tmp/run/.display
        sleep 1
      done
  auto_execute: true
